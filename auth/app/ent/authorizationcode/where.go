// Code generated by ent, DO NOT EDIT.

package authorizationcode

import (
	"auth/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeChallenge applies equality check predicate on the "code_challenge" field. It's identical to CodeChallengeEQ.
func CodeChallenge(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeMethod applies equality check predicate on the "code_challenge_method" field. It's identical to CodeChallengeMethodEQ.
func CodeChallengeMethod(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodeChallengeMethod), v))
	})
}

// Issued applies equality check predicate on the "issued" field. It's identical to IssuedEQ.
func Issued(v time.Time) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssued), v))
	})
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientID), v))
	})
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientID), v))
	})
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClientID), v...))
	})
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClientID), v...))
	})
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientID), v))
	})
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientID), v))
	})
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientID), v))
	})
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientID), v))
	})
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClientID), v))
	})
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClientID), v))
	})
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClientID), v))
	})
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClientID), v))
	})
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClientID), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// CodeChallengeEQ applies the EQ predicate on the "code_challenge" field.
func CodeChallengeEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeNEQ applies the NEQ predicate on the "code_challenge" field.
func CodeChallengeNEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeIn applies the In predicate on the "code_challenge" field.
func CodeChallengeIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCodeChallenge), v...))
	})
}

// CodeChallengeNotIn applies the NotIn predicate on the "code_challenge" field.
func CodeChallengeNotIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCodeChallenge), v...))
	})
}

// CodeChallengeGT applies the GT predicate on the "code_challenge" field.
func CodeChallengeGT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeGTE applies the GTE predicate on the "code_challenge" field.
func CodeChallengeGTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeLT applies the LT predicate on the "code_challenge" field.
func CodeChallengeLT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeLTE applies the LTE predicate on the "code_challenge" field.
func CodeChallengeLTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeContains applies the Contains predicate on the "code_challenge" field.
func CodeChallengeContains(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeHasPrefix applies the HasPrefix predicate on the "code_challenge" field.
func CodeChallengeHasPrefix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeHasSuffix applies the HasSuffix predicate on the "code_challenge" field.
func CodeChallengeHasSuffix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeEqualFold applies the EqualFold predicate on the "code_challenge" field.
func CodeChallengeEqualFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeContainsFold applies the ContainsFold predicate on the "code_challenge" field.
func CodeChallengeContainsFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodeChallenge), v))
	})
}

// CodeChallengeMethodEQ applies the EQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodNEQ applies the NEQ predicate on the "code_challenge_method" field.
func CodeChallengeMethodNEQ(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodIn applies the In predicate on the "code_challenge_method" field.
func CodeChallengeMethodIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCodeChallengeMethod), v...))
	})
}

// CodeChallengeMethodNotIn applies the NotIn predicate on the "code_challenge_method" field.
func CodeChallengeMethodNotIn(vs ...string) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCodeChallengeMethod), v...))
	})
}

// CodeChallengeMethodGT applies the GT predicate on the "code_challenge_method" field.
func CodeChallengeMethodGT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodGTE applies the GTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodGTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodLT applies the LT predicate on the "code_challenge_method" field.
func CodeChallengeMethodLT(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodLTE applies the LTE predicate on the "code_challenge_method" field.
func CodeChallengeMethodLTE(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodContains applies the Contains predicate on the "code_challenge_method" field.
func CodeChallengeMethodContains(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodHasPrefix applies the HasPrefix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasPrefix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodHasSuffix applies the HasSuffix predicate on the "code_challenge_method" field.
func CodeChallengeMethodHasSuffix(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodEqualFold applies the EqualFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodEqualFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodeChallengeMethod), v))
	})
}

// CodeChallengeMethodContainsFold applies the ContainsFold predicate on the "code_challenge_method" field.
func CodeChallengeMethodContainsFold(v string) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodeChallengeMethod), v))
	})
}

// IssuedEQ applies the EQ predicate on the "issued" field.
func IssuedEQ(v time.Time) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIssued), v))
	})
}

// IssuedNEQ applies the NEQ predicate on the "issued" field.
func IssuedNEQ(v time.Time) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIssued), v))
	})
}

// IssuedIn applies the In predicate on the "issued" field.
func IssuedIn(vs ...time.Time) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIssued), v...))
	})
}

// IssuedNotIn applies the NotIn predicate on the "issued" field.
func IssuedNotIn(vs ...time.Time) predicate.AuthorizationCode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIssued), v...))
	})
}

// IssuedGT applies the GT predicate on the "issued" field.
func IssuedGT(v time.Time) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIssued), v))
	})
}

// IssuedGTE applies the GTE predicate on the "issued" field.
func IssuedGTE(v time.Time) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIssued), v))
	})
}

// IssuedLT applies the LT predicate on the "issued" field.
func IssuedLT(v time.Time) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIssued), v))
	})
}

// IssuedLTE applies the LTE predicate on the "issued" field.
func IssuedLTE(v time.Time) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIssued), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthorizationCode) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthorizationCode) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthorizationCode) predicate.AuthorizationCode {
	return predicate.AuthorizationCode(func(s *sql.Selector) {
		p(s.Not())
	})
}
