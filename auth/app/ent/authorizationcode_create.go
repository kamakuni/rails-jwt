// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/ent/authorizationcode"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthorizationCodeCreate is the builder for creating a AuthorizationCode entity.
type AuthorizationCodeCreate struct {
	config
	mutation *AuthorizationCodeMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (acc *AuthorizationCodeCreate) SetClientID(s string) *AuthorizationCodeCreate {
	acc.mutation.SetClientID(s)
	return acc
}

// SetCode sets the "code" field.
func (acc *AuthorizationCodeCreate) SetCode(s string) *AuthorizationCodeCreate {
	acc.mutation.SetCode(s)
	return acc
}

// SetCodeChallenge sets the "code_challenge" field.
func (acc *AuthorizationCodeCreate) SetCodeChallenge(s string) *AuthorizationCodeCreate {
	acc.mutation.SetCodeChallenge(s)
	return acc
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (acc *AuthorizationCodeCreate) SetCodeChallengeMethod(s string) *AuthorizationCodeCreate {
	acc.mutation.SetCodeChallengeMethod(s)
	return acc
}

// SetIssued sets the "issued" field.
func (acc *AuthorizationCodeCreate) SetIssued(t time.Time) *AuthorizationCodeCreate {
	acc.mutation.SetIssued(t)
	return acc
}

// SetNillableIssued sets the "issued" field if the given value is not nil.
func (acc *AuthorizationCodeCreate) SetNillableIssued(t *time.Time) *AuthorizationCodeCreate {
	if t != nil {
		acc.SetIssued(*t)
	}
	return acc
}

// Mutation returns the AuthorizationCodeMutation object of the builder.
func (acc *AuthorizationCodeCreate) Mutation() *AuthorizationCodeMutation {
	return acc.mutation
}

// Save creates the AuthorizationCode in the database.
func (acc *AuthorizationCodeCreate) Save(ctx context.Context) (*AuthorizationCode, error) {
	var (
		err  error
		node *AuthorizationCode
	)
	acc.defaults()
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthorizationCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AuthorizationCode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AuthorizationCodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AuthorizationCodeCreate) SaveX(ctx context.Context) *AuthorizationCode {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AuthorizationCodeCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AuthorizationCodeCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AuthorizationCodeCreate) defaults() {
	if _, ok := acc.mutation.Issued(); !ok {
		v := authorizationcode.DefaultIssued
		acc.mutation.SetIssued(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AuthorizationCodeCreate) check() error {
	if _, ok := acc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "AuthorizationCode.client_id"`)}
	}
	if v, ok := acc.mutation.ClientID(); ok {
		if err := authorizationcode.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "AuthorizationCode.client_id": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "AuthorizationCode.code"`)}
	}
	if v, ok := acc.mutation.Code(); ok {
		if err := authorizationcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AuthorizationCode.code": %w`, err)}
		}
	}
	if _, ok := acc.mutation.CodeChallenge(); !ok {
		return &ValidationError{Name: "code_challenge", err: errors.New(`ent: missing required field "AuthorizationCode.code_challenge"`)}
	}
	if v, ok := acc.mutation.CodeChallenge(); ok {
		if err := authorizationcode.CodeChallengeValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge", err: fmt.Errorf(`ent: validator failed for field "AuthorizationCode.code_challenge": %w`, err)}
		}
	}
	if _, ok := acc.mutation.CodeChallengeMethod(); !ok {
		return &ValidationError{Name: "code_challenge_method", err: errors.New(`ent: missing required field "AuthorizationCode.code_challenge_method"`)}
	}
	if v, ok := acc.mutation.CodeChallengeMethod(); ok {
		if err := authorizationcode.CodeChallengeMethodValidator(v); err != nil {
			return &ValidationError{Name: "code_challenge_method", err: fmt.Errorf(`ent: validator failed for field "AuthorizationCode.code_challenge_method": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Issued(); !ok {
		return &ValidationError{Name: "issued", err: errors.New(`ent: missing required field "AuthorizationCode.issued"`)}
	}
	return nil
}

func (acc *AuthorizationCodeCreate) sqlSave(ctx context.Context) (*AuthorizationCode, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (acc *AuthorizationCodeCreate) createSpec() (*AuthorizationCode, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthorizationCode{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authorizationcode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authorizationcode.FieldID,
			},
		}
	)
	if value, ok := acc.mutation.ClientID(); ok {
		_spec.SetField(authorizationcode.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := acc.mutation.Code(); ok {
		_spec.SetField(authorizationcode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := acc.mutation.CodeChallenge(); ok {
		_spec.SetField(authorizationcode.FieldCodeChallenge, field.TypeString, value)
		_node.CodeChallenge = value
	}
	if value, ok := acc.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(authorizationcode.FieldCodeChallengeMethod, field.TypeString, value)
		_node.CodeChallengeMethod = value
	}
	if value, ok := acc.mutation.Issued(); ok {
		_spec.SetField(authorizationcode.FieldIssued, field.TypeTime, value)
		_node.Issued = value
	}
	return _node, _spec
}

// AuthorizationCodeCreateBulk is the builder for creating many AuthorizationCode entities in bulk.
type AuthorizationCodeCreateBulk struct {
	config
	builders []*AuthorizationCodeCreate
}

// Save creates the AuthorizationCode entities in the database.
func (accb *AuthorizationCodeCreateBulk) Save(ctx context.Context) ([]*AuthorizationCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AuthorizationCode, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorizationCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AuthorizationCodeCreateBulk) SaveX(ctx context.Context) []*AuthorizationCode {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AuthorizationCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AuthorizationCodeCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
